#!/usr/bin/env node

/**
 * –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å Deal-48
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏, –∑–∞–¥–∞—á–∏ –∏ workflow template
 */

import { createClient } from '@supabase/supabase-js';
import { config } from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config({ path: '.env.local' });

// –°–æ–∑–¥–∞–µ–º Supabase –∫–ª–∏–µ–Ω—Ç
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è NEXT_PUBLIC_SUPABASE_URL –∏–ª–∏ SUPABASE_SERVICE_ROLE_KEY');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

async function diagnoseDeal48() {
  console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –ø—Ä–æ–±–ª–µ–º—ã —Å workflow –ø–µ—Ä–µ—Ö–æ–¥–æ–º...\n');

  try {
    // –°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–µ–º –≤—Å–µ —Å–¥–µ–ª–∫–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    console.log('1Ô∏è‚É£ –ò—â–µ–º —Å–¥–µ–ª–∫–∏ –≤ —Å–∏—Å—Ç–µ–º–µ...');
    const { data: allDeals, error: allDealsError } = await supabase
      .from('deals')
      .select('id, workflow_id, workflow_version_id, status, payload, created_at, updated_at')
      .order('created_at', { ascending: false })
      .limit(10);

    if (allDealsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–¥–µ–ª–æ–∫:', allDealsError);
      return;
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${allDeals.length} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–¥–µ–ª–æ–∫:`);
    allDeals.forEach((deal, index) => {
      console.log(`   ${index + 1}. ${deal.id} - ${deal.status} (workflow: ${deal.workflow_id})`);
    });
    console.log('');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º workflow template –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
    console.log('2Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º workflow template...');
    const { data: workflowVersions, error: workflowError } = await supabase
      .from('workflow_versions')
      .select('id, template, version, title')
      .eq('workflow_id', 'fast-lease-v1')
      .eq('is_active', true)
      .maybeSingle();

    if (workflowError || !workflowVersions) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ workflow template:', workflowError);
      return;
    }

    const workflowTemplate = workflowVersions.template;
    console.log(`‚úÖ Workflow template –ø–æ–ª—É—á–µ–Ω: ${workflowVersions.title} (v${workflowVersions.version})`);

    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ template
    console.log('üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ workflow template:');
    console.log(`   –¢–∏–ø: ${typeof workflowTemplate}`);
    console.log(`   –ö–ª—é—á–∏: ${workflowTemplate ? Object.keys(workflowTemplate) : 'null/undefined'}`);

    if (workflowTemplate && workflowTemplate.stages) {
      console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç—Ç–∞–ø—ã (stages):');
      Object.entries(workflowTemplate.stages).forEach(([key, stage]) => {
        console.log(`   ${key} - ${stage.title || key}`);
        if (stage.description) {
          console.log(`     –û–ø–∏—Å–∞–Ω–∏–µ: ${stage.description}`);
        }
      });
    } else {
      console.log('‚ùå –≠—Ç–∞–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ workflow template');
      console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏:', workflowTemplate ? Object.keys(workflowTemplate) : 'template is null');
      console.log('üìã –ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ template:', JSON.stringify(workflowTemplate, null, 2));
    }
    console.log('');

    // –ò—â–µ–º —Å–¥–µ–ª–∫–∏ –≤ —Ä–∞–Ω–Ω–∏—Ö —Å—Ç–∞—Ç—É—Å–∞—Ö workflow
    const earlyStatuses = ['NEW_APPLICATION', 'APPLICATION_REVIEW'];
    const earlyDeals = allDeals.filter(deal => earlyStatuses.includes(deal.status));

    if (earlyDeals.length === 0) {
      console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–¥–µ–ª–æ–∫ –≤ —Ä–∞–Ω–Ω–∏—Ö —Å—Ç–∞—Ç—É—Å–∞—Ö workflow');
      console.log('üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º—É—é —Ä–∞–Ω–Ω—é—é –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å–¥–µ–ª–∫—É –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏...');
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${earlyDeals.length} —Å–¥–µ–ª–æ–∫ –≤ —Ä–∞–Ω–Ω–∏—Ö —Å—Ç–∞—Ç—É—Å–∞—Ö:`);
      earlyDeals.forEach((deal, index) => {
        console.log(`   ${index + 1}. ${deal.id} - ${deal.status}`);
      });
      console.log('');
    }

    // –ë–µ—Ä–µ–º —Å–∞–º—É—é —Ä–∞–Ω–Ω—é—é —Å–¥–µ–ª–∫—É –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    const deal = earlyDeals.length > 0 ? earlyDeals[0] : allDeals[allDeals.length - 1];
    console.log(`üìã –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–¥–µ–ª–∫—É: ${deal.id}`);

    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏:');
    console.log(`   ID: ${deal.id}`);
    console.log(`   Workflow ID: ${deal.workflow_id}`);
    console.log(`   Workflow Version ID: ${deal.workflow_version_id}`);
    console.log(`   –°—Ç–∞—Ç—É—Å: ${deal.status}`);
    console.log(`   Payload:`, JSON.stringify(deal.payload, null, 2));
    console.log('');

    // 2. –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é workflow –≤–µ—Ä—Å–∏—é
    console.log('2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º workflow template...');
    let workflowVersionId = deal.workflow_version_id;

    if (!workflowVersionId) {
      console.log('   –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–µ—Ä—Å–∏—é workflow...');
      const { data: activeVersion, error: versionError } = await supabase
        .from('workflow_versions')
        .select('id, template, version, title')
        .eq('workflow_id', deal.workflow_id)
        .eq('is_active', true)
        .maybeSingle();

      if (versionError || !activeVersion) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–µ—Ä—Å–∏–∏ workflow:', versionError);
        return;
      }

      workflowVersionId = activeVersion.id;
      console.log(`   –ê–∫—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è: ${activeVersion.version} - ${activeVersion.title}`);
    }

    const { data: version, error: versionDataError } = await supabase
      .from('workflow_versions')
      .select('template')
      .eq('id', workflowVersionId)
      .maybeSingle();

    if (versionDataError || !version) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ template workflow –≤–µ—Ä—Å–∏–∏:', versionDataError);
      return;
    }

    const template = version.template;
    console.log('‚úÖ Workflow template –ø–æ–ª—É—á–µ–Ω');
    console.log('');

    // 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø
    console.log('3Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø...');
    const currentStage = workflowTemplate.stages ? workflowTemplate.stages[deal.status] : null;

    if (!currentStage) {
      console.error(`‚ùå –≠—Ç–∞–ø "${deal.status}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ workflow template`);
      console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç—Ç–∞–ø—ã:', workflowTemplate.stages ? Object.keys(workflowTemplate.stages) : 'stages –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞: ${currentStage.title || deal.status}`);
    console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${currentStage.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}`);

    if (currentStage.exitRequirements) {
      console.log('   Exit Requirements (guards –¥–ª—è –≤—ã—Ö–æ–¥–∞):');
      currentStage.exitRequirements.forEach((req, index) => {
        console.log(`     ${index + 1}. Key: "${req.key}", Rule: "${req.rule}"`);
      });
    } else {
      console.log('   Exit Requirements: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
    }
    console.log('');

    // 4. –ò—â–µ–º –ø–µ—Ä–µ—Ö–æ–¥—ã –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞
    console.log('4Ô∏è‚É£ –ò—â–µ–º –ø–µ—Ä–µ—Ö–æ–¥—ã –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞...');
    const transitions = workflowTemplate.transitions ? workflowTemplate.transitions.filter(t => t.from === deal.status) : [];

    if (transitions.length === 0) {
      console.error(`‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –∏–∑ —ç—Ç–∞–ø–∞ "${deal.status}"`);
      return;
    }

    console.log(`   –ù–∞–π–¥–µ–Ω–æ ${transitions.length} –ø–µ—Ä–µ—Ö–æ–¥(–æ–≤):`);
    transitions.forEach((transition, index) => {
      console.log(`   ${index + 1}. –ò–∑ "${transition.from}" –≤ "${transition.to}"`);
      console.log(`      –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ä–æ–ª–∏: [${transition.byRoles ? transition.byRoles.join(', ') : '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}]`);

      if (transition.guards && transition.guards.length > 0) {
        console.log('      Guards:');
        transition.guards.forEach((guard, guardIndex) => {
          console.log(`        ${guardIndex + 1}. Key: "${guard.key}", Rule: "${guard.rule}"`);
        });
      } else {
        console.log('      Guards: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
      }
      console.log('');
    });

    // 5. –ò—â–µ–º –∑–∞–¥–∞—á—É "–ê–≤—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ —É –¥–∏–ª–µ—Ä–∞/–±—Ä–æ–∫–µ—Ä–∞"
    console.log('5Ô∏è‚É£ –ò—â–µ–º –∑–∞–¥–∞—á—É "–ê–≤—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ —É –¥–∏–ª–µ—Ä–∞/–±—Ä–æ–∫–µ—Ä–∞"...');
    const { data: tasks, error: tasksError } = await supabase
      .from('tasks')
      .select('id, deal_id, type, status, payload, assignee_role, assignee_user_id, created_at, updated_at')
      .eq('deal_id', deal.id)
      .eq('type', 'CONFIRM_CAR')
      .order('created_at', { ascending: false });

    if (tasksError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á:', tasksError);
      return;
    }

    if (!tasks || tasks.length === 0) {
      console.log('‚ùå –ó–∞–¥–∞—á–∞ —Ç–∏–ø–∞ CONFIRM_CAR –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è Deal-48');
      return;
    }

    const confirmCarTask = tasks[0]; // –ë–µ—Ä–µ–º —Å–∞–º—É—é —Å–≤–µ–∂—É—é –∑–∞–¥–∞—á—É
    console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∑–∞–¥–∞—á–∞:');
    console.log(`   ID: ${confirmCarTask.id}`);
    console.log(`   –¢–∏–ø: ${confirmCarTask.type}`);
    console.log(`   –°—Ç–∞—Ç—É—Å: ${confirmCarTask.status}`);
    console.log(`   Assignee Role: ${confirmCarTask.assignee_role}`);
    console.log(`   Payload:`, JSON.stringify(confirmCarTask.payload, null, 2));
    console.log('');

    // 6. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º guard key –¥–ª—è –∑–∞–¥–∞—á–∏
    console.log('6Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º guard key –¥–ª—è –∑–∞–¥–∞—á–∏...');
    const taskPayload = confirmCarTask.payload || {};
    const guardKeyFromPayload = taskPayload.guard_key;
    const statusKeyFromPayload = taskPayload.status_key;

    console.log(`   Guard Key –∏–∑ payload: ${guardKeyFromPayload || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
    console.log(`   Status Key –∏–∑ payload: ${statusKeyFromPayload || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º guard key –ø–æ fallback –ª–æ–≥–∏–∫–µ
    const TASK_GUARD_FALLBACK = {
      'CONFIRM_CAR': 'tasks.confirmCar.completed',
      'PREPARE_QUOTE': 'quotationPrepared',
      'VERIFY_VEHICLE': 'vehicle.verified',
      'COLLECT_DOCS': 'docs.required.allUploaded',
      'AECB_CHECK': 'risk.approved',
      'FIN_CALC': 'finance.approved',
      'INVESTOR_APPROVAL': 'investor.approved',
      'PREPARE_CONTRACT': 'legal.contractReady',
      'RECEIVE_ADVANCE': 'payments.advanceReceived',
      'PAY_SUPPLIER': 'payments.supplierPaid',
      'ARRANGE_DELIVERY': 'delivery.confirmed',
    };

    const fallbackGuardKey = TASK_GUARD_FALLBACK[confirmCarTask.type];
    const resolvedGuardKey = guardKeyFromPayload || fallbackGuardKey;

    console.log(`   –ò—Ç–æ–≥–æ–≤—ã–π Guard Key: ${resolvedGuardKey}`);
    console.log('');

    // 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ guard key –∏ guards –≤ –ø–µ—Ä–µ—Ö–æ–¥–∞—Ö
    console.log('7Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ guard key –∏ guards –≤ –ø–µ—Ä–µ—Ö–æ–¥–∞—Ö...');
    let matchingTransition = null;

    for (const transition of transitions) {
      if (transition.guards && transition.guards.length > 0) {
        const guardMatches = transition.guards.some(guard => guard.key === resolvedGuardKey);
        if (guardMatches) {
          matchingTransition = transition;
          console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–µ—Ä–µ—Ö–æ–¥:`);
          console.log(`      –ò–∑ "${transition.from}" –≤ "${transition.to}"`);
          console.log(`      Guard Key —Å–æ–≤–ø–∞–¥–∞–µ—Ç: ${resolvedGuardKey}`);
          break;
        }
      } else {
        // –ï—Å–ª–∏ —É –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–µ—Ç guards, –æ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
        console.log(`   ‚ö†Ô∏è  –ü–µ—Ä–µ—Ö–æ–¥ –±–µ–∑ guards: –∏–∑ "${transition.from}" –≤ "${transition.to}"`);
      }
    }

    if (!matchingTransition) {
      console.log('   ‚ùå –ù–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º–∏ guards');
      console.log('   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.log('   - –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ guard key –≤ –∑–∞–¥–∞—á–µ –∏ workflow template');
      console.log('   - –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å, –Ω–æ guard –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è –≤ payload —Å–¥–µ–ª–∫–∏');
      console.log('   - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è workflow template');
    }

    // 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º payload —Å–¥–µ–ª–∫–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ guard —Ñ–ª–∞–≥–æ–≤
    console.log('\n8Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º guard —Ñ–ª–∞–≥–∏ –≤ payload —Å–¥–µ–ª–∫–∏...');
    const dealPayload = deal.payload || {};

    if (resolvedGuardKey) {
      const guardPath = resolvedGuardKey.split('.');
      let currentObj = dealPayload;

      for (let i = 0; i < guardPath.length; i++) {
        const key = guardPath[i];
        console.log(`   –ü—Ä–æ–≤–µ—Ä—è–µ–º: ${guardPath.slice(0, i + 1).join('.')}`);

        if (i === guardPath.length - 1) {
          // –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–ª—é—á - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
          const value = currentObj[key];
          console.log(`   –ó–Ω–∞—á–µ–Ω–∏–µ: ${value}`);
          if (value === true) {
            console.log('   ‚úÖ Guard —Ñ–ª–∞–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
          } else {
            console.log('   ‚ùå Guard —Ñ–ª–∞–≥ –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
          }
        } else {
          // –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –∫–ª—é—á - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≥–ª—É–±–∂–µ
          if (currentObj[key] && typeof currentObj[key] === 'object') {
            currentObj = currentObj[key];
            console.log('   ‚úÖ –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –æ–±—ä–µ–∫—Ç –Ω–∞–π–¥–µ–Ω');
          } else {
            console.log('   ‚ùå –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –æ–±—ä–µ–∫—Ç –ù–ï –Ω–∞–π–¥–µ–Ω');
            break;
          }
        }
      }
    }

    console.log('\nüìã SUMMARY:');
    console.log(`Deal ID: ${deal.id}`);
    console.log(`Current Status: ${deal.status}`);
    console.log(`Resolved Guard Key: ${resolvedGuardKey}`);
    console.log(`Task Status: ${confirmCarTask.status}`);
    console.log(`Matching Transition: ${matchingTransition ? '–Ω–∞–π–¥–µ–Ω' : '–ù–ï –Ω–∞–π–¥–µ–Ω'}`);

  } catch (error) {
    console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
diagnoseDeal48();