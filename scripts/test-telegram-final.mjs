#!/usr/bin/env node

import { createClient } from '@supabase/supabase-js';
import { readFileSync } from 'fs';
import { resolve } from 'path';

// Load environment variables from .env.local
function loadEnv() {
  const envPath = resolve(process.cwd(), '.env.local');
  try {
    const envContent = readFileSync(envPath, 'utf8');
    const lines = envContent.split('\n');
    
    for (const line of lines) {
      const trimmedLine = line.trim();
      if (trimmedLine && !trimmedLine.startsWith('#')) {
        const [key, ...valueParts] = trimmedLine.split('=');
        if (key && valueParts.length > 0) {
          let value = valueParts.join('=');
          // Remove quotes if present
          if ((value.startsWith('"') && value.endsWith('"')) || 
              (value.startsWith("'") && value.endsWith("'"))) {
            value = value.slice(1, -1);
          }
          process.env[key] = value;
        }
      }
    }
  } catch (error) {
    console.error('Error loading .env.local:', error.message);
  }
}

// Load environment variables
loadEnv();

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('Missing Supabase credentials');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function testTelegramNotification() {
  console.log('üöÄ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
  
  try {
    // 1. –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å
    const testMessage = `üéâ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç Telegram ${new Date().toISOString()}`;
    const { data: notification, error: insertError } = await supabase
      .from('workflow_notification_queue')
      .insert({
        template: 'telegram_test',
        to_roles: ['OP_MANAGER'],
        payload: { message: testMessage },
        action_hash: `test-telegram-${Date.now()}`
      })
      .select()
      .single();

    if (insertError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', insertError);
      return;
    }

    console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å:', { id: notification.id });

    // 2. –í—ã–∑—ã–≤–∞–µ–º Edge Function –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏
    const { data: result, error: functionError } = await supabase.functions.invoke(
      'process-workflow-queues',
      {
        body: { 
          test: true,
          force_process: true
        }
      }
    );

    if (functionError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ Edge Function:', functionError);
      return;
    }

    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ Edge Function:', result);

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const { data: updatedNotification, error: selectError } = await supabase
      .from('workflow_notification_queue')
      .select('*')
      .eq('id', notification.id)
      .single();

    if (selectError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', selectError);
      return;
    }

    const status = String(updatedNotification.status ?? '').toUpperCase();

    console.log('üìã –°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', {
      id: updatedNotification.id,
      status,
      processed_at: updatedNotification.processed_at,
      error: updatedNotification.error,
    });

    if (status === 'SENT') {
      console.log('üéâ –£–°–ü–ï–•! –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram!');
      console.log(`üì± –ü—Ä–æ–≤–µ—Ä—å Telegram –≥—Ä—É–ø–ø—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è: "${testMessage}"`);
    } else if (status === 'FAILED') {
      console.log('‚ùå –û–®–ò–ë–ö–ê! –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.');
      console.log('üîç –û—à–∏–±–∫–∞:', updatedNotification.error || updatedNotification.error_message);
    } else {
      console.log('‚è≥ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...');
    }

  } catch (error) {
    console.error('üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

testTelegramNotification();