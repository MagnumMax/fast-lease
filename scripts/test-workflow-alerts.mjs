import { readFileSync } from 'fs';
import { createClient } from '@supabase/supabase-js';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env.local
function loadEnv() {
  try {
    const envContent = readFileSync('.env.local', 'utf8');
    const lines = envContent.split('\n');
    
    lines.forEach(line => {
      const trimmedLine = line.trim();
      if (trimmedLine && !trimmedLine.startsWith('#')) {
        const [key, ...valueParts] = trimmedLine.split('=');
        if (key && valueParts.length > 0) {
          const value = valueParts.join('=').replace(/^["']|["']$/g, '');
          process.env[key] = value;
        }
      }
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env.local:', error.message);
    process.exit(1);
  }
}

function getEnv(key) {
  const value = process.env[key];
  if (!value) {
    console.error(`‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è ${key} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    process.exit(1);
  }
  return value;
}

async function main() {
  loadEnv();

  const supabaseUrl = getEnv("NEXT_PUBLIC_SUPABASE_URL");
  const serviceRoleKey = getEnv("SUPABASE_SERVICE_ROLE_KEY");

  const supabase = createClient(supabaseUrl, serviceRoleKey, {
    auth: {
      persistSession: false,
    },
  });

  console.log('üö® –¢–µ—Å—Ç–∏—Ä—É—é Edge Function workflow-alerts...\n');

  try {
    // –í—ã–∑—ã–≤–∞–µ–º Edge Function
    const { data, error } = await supabase.functions.invoke('workflow-alerts', {
      body: {}
    });

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ Edge Function:', error);
      return;
    }

    console.log('‚úÖ Edge Function –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:');
    console.log(JSON.stringify(data, null, 2));

    if (data.alerts_triggered > 0) {
      console.log('\nüö® –í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã!');
      console.log('üì± –ü—Ä–æ–≤–µ—Ä—å Telegram –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
      
      if (data.triggered_alerts) {
        console.log('\nüìã –î–µ—Ç–∞–ª–∏ –∞–ª–µ—Ä—Ç–æ–≤:');
        data.triggered_alerts.forEach((alert, index) => {
          console.log(`   ${index + 1}. ${alert.queue_type}: ${alert.message}`);
        });
      }
    } else {
      console.log('\n‚úÖ –í—Å–µ –æ—á–µ—Ä–µ–¥–∏ –≤ –Ω–æ—Ä–º–µ, –∞–ª–µ—Ä—Ç–æ–≤ –Ω–µ—Ç');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤:', error);
  }
}

main().catch(console.error);