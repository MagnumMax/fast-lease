#!/usr/bin/env node

import { createClient } from '@supabase/supabase-js';
import { readFileSync } from 'fs';

// –ß–∏—Ç–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env.local
const envContent = readFileSync('.env.local', 'utf8');
const envVars = {};
envContent.split('\n').forEach(line => {
  const [key, ...valueParts] = line.split('=');
  if (key && valueParts.length > 0) {
    let value = valueParts.join('=').trim();
    // –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (value.startsWith('"') && value.endsWith('"')) {
      value = value.slice(1, -1);
    }
    envVars[key.trim()] = value;
  }
});

const supabaseUrl = envVars.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = envVars.SUPABASE_SERVICE_ROLE_KEY;
const anonKey = envVars.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è NEXT_PUBLIC_SUPABASE_URL –∏–ª–∏ SUPABASE_SERVICE_ROLE_KEY');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function setupCronJob() {
  console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ cron job –¥–ª—è workflow –∞–ª–µ—Ä—Ç–æ–≤...');

  try {
    // 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ–∫—Ä–µ—Ç—ã –≤ Vault
    console.log('üìù –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ–∫—Ä–µ—Ç—ã –≤ Vault...');
    
    const { error: vaultError1 } = await supabase
      .rpc('sql', {
        query: `
          INSERT INTO vault.secrets (name, secret) 
          VALUES ('project_url', $1)
          ON CONFLICT (name) DO UPDATE SET secret = EXCLUDED.secret;
        `,
        params: [supabaseUrl]
      });
    
    if (vaultError1) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è project_url:', vaultError1);
    } else {
      console.log('‚úÖ project_url —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
    }

    const { error: vaultError2 } = await supabase
      .rpc('sql', {
        query: `
          INSERT INTO vault.secrets (name, secret) 
          VALUES ('anon_key', $1)
          ON CONFLICT (name) DO UPDATE SET secret = EXCLUDED.secret;
        `,
        params: [anonKey]
      });
    
    if (vaultError2) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è anon_key:', vaultError2);
    } else {
      console.log('‚úÖ anon_key —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
    }

    // 2. –°–æ–∑–¥–∞–µ–º cron job
    console.log('‚è∞ –°–æ–∑–¥–∞–µ–º cron job...');
    
    const { data: cronResult, error: cronError } = await supabase
      .rpc('sql', {
        query: `
          SELECT cron.schedule(
            'workflow-alerts-monitor',
            '*/10 * * * *',
            $$
            SELECT
                net.http_post(
                    url := (SELECT decrypted_secret FROM vault.decrypted_secrets WHERE name = 'project_url') || '/functions/v1/workflow-alerts',
                    headers := jsonb_build_object(
                        'Content-Type', 'application/json',
                        'Authorization', 'Bearer ' || (SELECT decrypted_secret FROM vault.decrypted_secrets WHERE name = 'anon_key')
                    ),
                    body := jsonb_build_object(
                        'time', now(),
                        'source', 'cron'
                    ),
                    timeout_milliseconds := 30000
                ) as request_id;
            $$
          );
        `
      });

    if (cronError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è cron job:', cronError);
      return;
    }

    console.log('‚úÖ Cron job —Å–æ–∑–¥–∞–Ω:', cronResult);

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É...');
    
    const { data: jobs, error: jobsError } = await supabase
      .rpc('sql', {
        query: `
          SELECT jobname, schedule, active 
          FROM cron.job 
          WHERE jobname = 'workflow-alerts-monitor';
        `
      });

    if (jobsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞—á:', jobsError);
      return;
    }

    if (jobs && jobs.length > 0) {
      console.log('‚úÖ –ó–∞–¥–∞—á–∞ –Ω–∞–π–¥–µ–Ω–∞:', jobs);
      console.log('üéâ Cron job —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –ê–ª–µ—Ä—Ç—ã –±—É–¥—É—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç.');
    } else {
      console.log('‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ cron jobs');
    }

  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
setupCronJob();
