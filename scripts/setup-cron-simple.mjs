#!/usr/bin/env node

import { createClient } from '@supabase/supabase-js';
import { readFileSync } from 'fs';

// –ß–∏—Ç–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env.local
const envContent = readFileSync('.env.local', 'utf8');
const envVars = {};
envContent.split('\n').forEach(line => {
  const [key, ...valueParts] = line.split('=');
  if (key && valueParts.length > 0) {
    let value = valueParts.join('=').trim();
    // –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (value.startsWith('"') && value.endsWith('"')) {
      value = value.slice(1, -1);
    }
    envVars[key.trim()] = value;
  }
});

const supabaseUrl = envVars.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = envVars.SUPABASE_SERVICE_ROLE_KEY;
const anonKey = envVars.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è NEXT_PUBLIC_SUPABASE_URL –∏–ª–∏ SUPABASE_SERVICE_ROLE_KEY');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  db: { schema: 'public' }
});

async function setupCronJob() {
  console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ cron job –¥–ª—è workflow –∞–ª–µ—Ä—Ç–æ–≤...');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è...');
    
    const { data: extensions, error: extError } = await supabase
      .from('pg_extension')
      .select('extname')
      .in('extname', ['pg_cron', 'pg_net', 'vault']);

    if (extError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π:', extError);
      return;
    }

    console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è:', extensions?.map(e => e.extname) || []);

    // 2. –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã–∑–æ–≤–∞ Edge Function
    console.log('üìù –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã–∑–æ–≤–∞ Edge Function...');
    
    const createFunctionQuery = `
      CREATE OR REPLACE FUNCTION call_workflow_alerts()
      RETURNS void
      LANGUAGE plpgsql
      AS $$
      BEGIN
        -- –ü—Ä–æ—Å—Ç–æ–π HTTP –∑–∞–ø—Ä–æ—Å –∫ Edge Function
        PERFORM net.http_post(
          url := '${supabaseUrl}/functions/v1/workflow-alerts',
          headers := jsonb_build_object(
            'Content-Type', 'application/json',
            'Authorization', 'Bearer ${anonKey}'
          ),
          body := jsonb_build_object(
            'time', now(),
            'source', 'cron'
          ),
          timeout_milliseconds := 30000
        );
      END;
      $$;
    `;

    const { error: funcError } = await supabase.rpc('exec_sql', {
      sql: createFunctionQuery
    });

    if (funcError) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —á–µ—Ä–µ–∑ rpc, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±...');
      console.log('–û—à–∏–±–∫–∞:', funcError);
    } else {
      console.log('‚úÖ –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞');
    }

    // 3. –°–æ–∑–¥–∞–µ–º cron job
    console.log('‚è∞ –°–æ–∑–¥–∞–µ–º cron job...');
    
    const cronQuery = `SELECT cron.schedule('workflow-alerts-monitor', '*/10 * * * *', 'SELECT call_workflow_alerts();');`;

    const { error: cronError } = await supabase.rpc('exec_sql', {
      sql: cronQuery
    });

    if (cronError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è cron job:', cronError);
      
      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤
      console.log('üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±...');
      
      const directCronQuery = `
        SELECT cron.schedule(
          'workflow-alerts-monitor',
          '*/10 * * * *',
          $$
          SELECT net.http_post(
            url := '${supabaseUrl}/functions/v1/workflow-alerts',
            headers := '{"Content-Type": "application/json", "Authorization": "Bearer ${anonKey}"}'::jsonb,
            body := '{"time": "' || now() || '", "source": "cron"}'::jsonb,
            timeout_milliseconds := 30000
          );
          $$
        );
      `;

      const { error: directCronError } = await supabase.rpc('exec_sql', {
        sql: directCronQuery
      });

      if (directCronError) {
        console.error('‚ùå –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', directCronError);
        return;
      }
    }

    console.log('‚úÖ Cron job —Å–æ–∑–¥–∞–Ω');

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É...');
    
    const { data: jobs, error: jobsError } = await supabase
      .from('cron.job')
      .select('jobname, schedule, active')
      .eq('jobname', 'workflow-alerts-monitor');

    if (jobsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞—á:', jobsError);
      return;
    }

    if (jobs && jobs.length > 0) {
      console.log('‚úÖ –ó–∞–¥–∞—á–∞ –Ω–∞–π–¥–µ–Ω–∞:', jobs[0]);
      console.log('üéâ Cron job —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –ê–ª–µ—Ä—Ç—ã –±—É–¥—É—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç.');
    } else {
      console.log('‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ cron jobs');
    }

  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
setupCronJob();