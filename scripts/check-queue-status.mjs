import { createClient } from "@supabase/supabase-js";
import { readFileSync } from "node:fs";
import { resolve } from "node:path";

function loadEnv() {
  const envPath = resolve(".env.local");
  try {
    const content = readFileSync(envPath, "utf-8");
    for (const line of content.split(/\r?\n/)) {
      if (!line || line.startsWith("#")) continue;
      const [key, ...rest] = line.split("=");
      if (!key || rest.length === 0) continue;
      const valueRaw = rest.join("=").trim();
      const value = valueRaw.replace(/^"|"$/g, "");
      if (!process.env[key]) {
        process.env[key] = value;
      }
    }
  } catch (error) {
    console.warn("Unable to read .env.local", error instanceof Error ? error.message : String(error));
  }
}

function getEnv(name) {
  const value = process.env[name];
  if (!value) {
    throw new Error(`Environment variable ${name} is not set`);
  }
  return value;
}

async function main() {
  loadEnv();

  const supabaseUrl = getEnv("NEXT_PUBLIC_SUPABASE_URL");
  const serviceRoleKey = getEnv("SUPABASE_SERVICE_ROLE_KEY");

  const supabase = createClient(supabaseUrl, serviceRoleKey, {
    auth: {
      persistSession: false,
    },
  });

  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–µ–π workflow...\n');

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const { data: notifications, error: notifError } = await supabase
      .from('workflow_notification_queue')
      .select('status, created_at, template')
      .order('created_at', { ascending: false });

    if (notifError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', notifError);
      return;
    }

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã
    const notificationStats = notifications.reduce((acc, row) => {
      acc[row.status] = (acc[row.status] || 0) + 1;
      return acc;
    }, {});

    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:');
    console.log(`   PENDING: ${notificationStats.PENDING || 0}`);
    console.log(`   SENT: ${notificationStats.SENT || 0}`);
    console.log(`   FAILED: ${notificationStats.FAILED || 0}`);
    console.log(`   –í—Å–µ–≥–æ: ${notifications.length}\n`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ–±—Ö—É–∫–∏
    const { data: webhooks, error: webhookError } = await supabase
      .from('workflow_webhook_queue')
      .select('status')
      .order('created_at', { ascending: false });

    if (!webhookError && webhooks) {
      const webhookStats = webhooks.reduce((acc, row) => {
        acc[row.status] = (acc[row.status] || 0) + 1;
        return acc;
      }, {});

      console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –≤–µ–±—Ö—É–∫–æ–≤:');
      console.log(`   PENDING: ${webhookStats.PENDING || 0}`);
      console.log(`   SENT: ${webhookStats.SENT || 0}`);
      console.log(`   FAILED: ${webhookStats.FAILED || 0}`);
      console.log(`   –í—Å–µ–≥–æ: ${webhooks.length}\n`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    const { data: schedules, error: scheduleError } = await supabase
      .from('workflow_schedule_queue')
      .select('status')
      .order('created_at', { ascending: false });

    if (!scheduleError && schedules) {
      const scheduleStats = schedules.reduce((acc, row) => {
        acc[row.status] = (acc[row.status] || 0) + 1;
        return acc;
      }, {});

      console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π:');
      console.log(`   PENDING: ${scheduleStats.PENDING || 0}`);
      console.log(`   SENT: ${scheduleStats.SENT || 0}`);
      console.log(`   FAILED: ${scheduleStats.FAILED || 0}`);
      console.log(`   –í—Å–µ–≥–æ: ${schedules.length}\n`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª–µ—Ä—Ç—ã
    const failedCount = notificationStats.FAILED || 0;
    const pendingCount = notificationStats.PENDING || 0;

    console.log('üö® –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –∞–ª–µ—Ä—Ç–æ–≤:');
    if (failedCount > 0) {
      console.log(`   ‚ö†Ô∏è  –ê–õ–ï–†–¢: –ù–∞–π–¥–µ–Ω–æ ${failedCount} –Ω–µ—É–¥–∞—á–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!`);
    } else {
      console.log('   ‚úÖ –ù–µ—Ç –Ω–µ—É–¥–∞—á–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
    }

    if (pendingCount > 50) {
      console.log(`   ‚ö†Ô∏è  –ê–õ–ï–†–¢: –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ–∂–∏–¥–∞—é—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${pendingCount}!`);
    } else {
      console.log(`   ‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∂–∏–¥–∞—é—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –Ω–æ—Ä–º–µ: ${pendingCount}`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–µ PENDING –∑–∞–ø–∏—Å–∏
    const { data: oldPending, error: oldError } = await supabase
      .from('workflow_notification_queue')
      .select('id, created_at, template')
      .eq('status', 'PENDING')
      .lt('created_at', new Date(Date.now() - 60 * 60 * 1000).toISOString());

    if (!oldError && oldPending && oldPending.length > 0) {
      console.log(`   ‚ö†Ô∏è  –ê–õ–ï–†–¢: –ù–∞–π–¥–µ–Ω–æ ${oldPending.length} —Å—Ç–∞—Ä—ã—Ö PENDING –∑–∞–ø–∏—Å–µ–π (>1 —á–∞—Å–∞)!`);
      oldPending.forEach(record => {
        console.log(`      - ${record.template} (${record.created_at})`);
      });
    } else {
      console.log('   ‚úÖ –ù–µ—Ç —Å—Ç–∞—Ä—ã—Ö PENDING –∑–∞–ø–∏—Å–µ–π');
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏
    console.log('\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π –≤ –æ—á–µ—Ä–µ–¥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:');
    notifications.slice(0, 5).forEach((record, index) => {
      console.log(`   ${index + 1}. ${record.template} - ${record.status} (${record.created_at})`);
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—á–µ—Ä–µ–¥–µ–π:', error);
  }
}

main().catch((error) => {
  console.error("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞:", error);
  process.exit(1);
});
