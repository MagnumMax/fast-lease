import { createClient } from '@supabase/supabase-js';
import fs from 'fs';

async function main() {
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env.local
    const envContent = fs.readFileSync('.env.local', 'utf8');
    const envVars = {};
    envContent.split('\n').forEach(line => {
      const [key, value] = line.split('=');
      if (key && value) {
        envVars[key.trim()] = value.trim().replace(/^["']|["']$/g, '');
      }
    });

    const supabase = createClient(
      envVars.NEXT_PUBLIC_SUPABASE_URL,
      envVars.SUPABASE_SERVICE_ROLE_KEY
    );

    console.log('üß™ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞–ª–µ—Ä—Ç...');

    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π deal_id
    const { data: deals, error: dealsError } = await supabase
      .from('deals')
      .select('id')
      .limit(1);

    if (dealsError || !deals?.length) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è deal_id:', dealsError);
      process.exit(1);
    }

    const dealId = deals[0].id;
    console.log('üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º deal_id:', dealId);

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å —Å FAILED —Å—Ç–∞—Ç—É—Å–æ–º
    const { data: insertData, error: insertError } = await supabase
      .from('workflow_notification_queue')
      .insert({
        deal_id: dealId,
        template: 'test_alert',
        to_roles: ['admin'],
        status: 'FAILED',
        action_hash: 'test-alert-' + Date.now(),
        payload: { test: true },
        error: 'Test error for alert testing'
      })
      .select()
      .single();

    if (insertError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–ø–∏—Å–∏:', insertError);
      process.exit(1);
    }

    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞:', insertData.id);

    // –í—ã–∑—ã–≤–∞–µ–º Edge Function –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤
    console.log('\nüîî –í—ã–∑—ã–≤–∞–µ–º workflow-alerts...');

    const { data: alertData, error: alertError } = await supabase.functions.invoke('workflow-alerts');

    if (alertError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ workflow-alerts:', alertError);
    } else {
      console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–ª–µ—Ä—Ç–æ–≤:', JSON.stringify(alertData, null, 2));
      
      if (alertData.alerts_triggered > 0) {
        console.log('\nüö® –£–°–ü–ï–•: –ê–ª–µ—Ä—Ç —Å—Ä–∞–±–æ—Ç–∞–ª!');
        console.log('üì± –ü—Ä–æ–≤–µ—Ä—å Telegram –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
      } else {
        console.log('\n‚ùå –ê–ª–µ—Ä—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª');
      }
    }

    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
    console.log('\nüßπ –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å...');

    const { error: deleteError } = await supabase
      .from('workflow_notification_queue')
      .delete()
      .eq('id', insertData.id);

    if (deleteError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–ø–∏—Å–∏:', deleteError);
    } else {
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞');
    }

    console.log('\nüéØ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

main();