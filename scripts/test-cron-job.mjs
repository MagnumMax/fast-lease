#!/usr/bin/env node

import { createClient } from '@supabase/supabase-js'
import { readFileSync } from 'fs'

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env.local
function loadEnvFile() {
  try {
    const envContent = readFileSync('.env.local', 'utf8')
    const envVars = {}
    
    envContent.split('\n').forEach(line => {
      const trimmed = line.trim()
      if (trimmed && !trimmed.startsWith('#')) {
        const [key, ...valueParts] = trimmed.split('=')
        if (key && valueParts.length > 0) {
          let value = valueParts.join('=').trim()
          // –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
          if ((value.startsWith('"') && value.endsWith('"')) || 
              (value.startsWith("'") && value.endsWith("'"))) {
            value = value.slice(1, -1)
          }
          envVars[key.trim()] = value
        }
      }
    })
    
    return envVars
  } catch (error) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å .env.local:', error.message)
    return {}
  }
}

const env = loadEnvFile()
const supabaseUrl = env.NEXT_PUBLIC_SUPABASE_URL
const supabaseKey = env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è SUPABASE_URL –∏–ª–∏ SUPABASE_SERVICE_ROLE_KEY')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function testCronJob() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å cron job...\n')

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ cron job —á–µ—Ä–µ–∑ SQL –∑–∞–ø—Ä–æ—Å
    const { data: cronJobs, error: cronError } = await supabase
      .rpc('exec_sql', { 
        sql: "SELECT * FROM cron.job WHERE jobname = 'workflow-alerts-monitor'" 
      })

    if (cronError) {
      console.log('‚ÑπÔ∏è  –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ cron.job –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ API')
      console.log('   –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ - —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã pg_cron –∑–∞—â–∏—â–µ–Ω—ã')
    } else if (cronJobs && cronJobs.length > 0) {
      const cronJob = cronJobs[0]
      console.log('‚úÖ Cron job –Ω–∞–π–¥–µ–Ω:')
      console.log(`   üìã –ù–∞–∑–≤–∞–Ω–∏–µ: ${cronJob.jobname}`)
      console.log(`   ‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: ${cronJob.schedule}`)
      console.log(`   üü¢ –ê–∫—Ç–∏–≤–µ–Ω: ${cronJob.active ? '–î–∞' : '–ù–µ—Ç'}`)
      console.log('')
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é call_workflow_alerts
    console.log('üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é call_workflow_alerts...')
    
    const { error: functionError } = await supabase
      .rpc('call_workflow_alerts')

    if (functionError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏:', functionError.message)
    } else {
      console.log('‚úÖ –§—É–Ω–∫—Ü–∏—è call_workflow_alerts –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ')
    }

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!')
    console.log('üí° –ï—Å–ª–∏ cron job —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ, –æ–Ω –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏')
    console.log('   –≤—ã–∑—ã–≤–∞—Ç—å workflow-alerts –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç')
    console.log('\nüìù –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã cron job:')
    console.log('   1. –ó–∞–π–¥–∏ –≤ Supabase Dashboard ‚Üí SQL Editor')
    console.log('   2. –í—ã–ø–æ–ª–Ω–∏: SELECT * FROM cron.job WHERE jobname = \'workflow-alerts-monitor\'')
    console.log('   3. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ Logs ‚Üí Edge Functions')

  } catch (error) {
    console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error.message)
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testCronJob()
